{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["chunks","App","useState","size","setSize","chunkType","setChunkType","running","setRunning","useEffect","a","chunk","array","Uint8Array","i","length","Math","floor","random","set","buffer","fill","prettyBytes","onClick","clear","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4NAIMA,EAAS,CAAC,IAAmB,IAAkB,IAAa,KA0CnDC,MAxCf,WAAgB,IAAD,EACWC,mBAAS,GADpB,mBACNC,EADM,KACAC,EADA,OAEqBF,mBAAS,GAF9B,mBAENG,EAFM,KAEKC,EAFL,OAGiBJ,oBAAS,GAH1B,mBAGNK,EAHM,KAGGC,EAHH,KAsBb,OAlBAC,qBAAU,WAgBJF,GAfM,uCAAG,gCAAAG,EAAA,sDAIT,IAHEC,EAAQX,EAAOK,GADR,SAGLO,EAAQ,IAAIC,WAAWF,GAClBG,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAChCF,EAAME,GAAKE,KAAKC,MAAsB,IAAhBD,KAAKE,UALpB,gBAOHC,YAAIhB,EAAMS,EAAMQ,QAPb,OAQThB,EAAQD,EAAOQ,GARN,gDAULN,EAAYL,EAAOe,OAAS,GAC9BT,EAAaD,EAAY,GAXlB,yDAAH,oDAeGgB,MAGb,oCACE,uCAAaC,IAAYnB,IACzB,4BAAQoB,QAAS,kBAAMf,GAAW,KAAlC,SACA,4BAAQe,QAAS,kBAAMf,GAAW,KAAlC,QACA,4BACEe,QAAS,WACPC,cACApB,EAAQ,GACRE,EAAa,KAJjB,WCrBcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ea38e801.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { clear, set } from \"idb-keyval\";\nimport prettyBytes from \"pretty-bytes\";\n\nconst chunks = [1000 * 1000 * 100, 1000 * 1000 * 10, 1000 * 1000, 1000];\n\nfunction App() {\n  const [size, setSize] = useState(0);\n  const [chunkType, setChunkType] = useState(0);\n  const [running, setRunning] = useState(false);\n  useEffect(() => {\n    const fill = async () => {\n      let chunk = chunks[chunkType];\n      try {\n        let array = new Uint8Array(chunk);\n        for (let i = 0; i < array.length; i++) {\n          array[i] = Math.floor(Math.random() * 255);\n        }\n        await set(size, array.buffer);\n        setSize(size + chunk);\n      } catch (err) {\n        if (chunkType < chunks.length - 1) {\n          setChunkType(chunkType + 1);\n        }\n      }\n    };\n    if (running) fill();\n  });\n  return (\n    <>\n      <div>Filled {prettyBytes(size)}</div>\n      <button onClick={() => setRunning(true)}>Start</button>\n      <button onClick={() => setRunning(false)}>Stop</button>\n      <button\n        onClick={() => {\n          clear();\n          setSize(0);\n          setChunkType(0);\n        }}\n      >\n        Clear\n      </button>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}