{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["fillWithRandomBytes","array","rnd","Uint8Array","window","crypto","getRandomValues","i","length","end","Math","min","set","subarray","chunks","App","useState","quota","setQuota","size","setSize","chunkType","setChunkType","running","setRunning","useEffect","navigator","storage","estimate","webkitTemporaryStorage","Promise","resolve","reject","queryUsageAndQuota","usage","then","a","chunk","buffer","console","log","fill","prettyBytes","onClick","clear","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7c38797b.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { clear, set } from \"idb-keyval\";\nimport prettyBytes from \"pretty-bytes\";\n\nfunction estimateStorage() {\n  if (\"storage\" in navigator && \"estimate\" in navigator.storage) {\n    // We've got the real thing! Return its response.\n    return navigator.storage.estimate();\n  }\n\n  if (\n    \"webkitTemporaryStorage\" in navigator &&\n    \"queryUsageAndQuota\" in navigator.webkitTemporaryStorage\n  ) {\n    // Return a promise-based wrapper that will follow the expected interface.\n    return new Promise(function(resolve, reject) {\n      navigator.webkitTemporaryStorage.queryUsageAndQuota(function(\n        usage,\n        quota\n      ) {\n        resolve({ usage: usage, quota: quota });\n      },\n      reject);\n    });\n  }\n\n  return Promise.reject();\n}\n\nconst MAX_ENTROPY = 65536;\nfunction fillWithRandomBytes(array) {\n  let rnd = new Uint8Array(MAX_ENTROPY);\n  window.crypto.getRandomValues(rnd);\n  for (let i = 0; i < array.length - 1; i += rnd.length) {\n    let end = Math.min(rnd.length, array.length - i);\n    array.set(rnd.subarray(0, end), i);\n  }\n}\nconst chunks = [1000 * 1000 * 100, 1000 * 1000 * 10, 1000 * 1000, 1000];\n\nfunction App() {\n  const [quota, setQuota] = useState(0);\n  const [size, setSize] = useState(0);\n  const [chunkType, setChunkType] = useState(0);\n  const [running, setRunning] = useState(false);\n  useEffect(() => {\n    estimateStorage().then(({ quota }) => setQuota(quota));\n  }, []);\n\n  useEffect(() => {\n    const fill = async () => {\n      let chunk = chunks[chunkType];\n      try {\n        let array = new Uint8Array(chunk);\n        fillWithRandomBytes(array);\n        await set(size, array.buffer);\n        setSize(size + chunk);\n      } catch (err) {\n        console.log(err);\n        if (chunkType < chunks.length - 1) {\n          setChunkType(chunkType + 1);\n        }\n      }\n    };\n    if (running) fill();\n  });\n  return (\n    <>\n      <h1>Quota Check</h1>\n      <p>\n        This app lets you test how much data can be stored in your browsers'\n        IndexedDB.\n      </p>\n      {quota && <p>The storage API reports a quota of {prettyBytes(quota)}.</p>}\n      <p>\n        Filled {prettyBytes(size)} (Chunk size {prettyBytes(chunks[chunkType])})\n      </p>\n      <p>\n        <button onClick={() => setRunning(true)}>Start</button>\n        <button onClick={() => setRunning(false)}>Stop</button>\n        <button\n          onClick={() => {\n            clear();\n            setSize(0);\n            setChunkType(0);\n          }}\n        >\n          Clear\n        </button>\n      </p>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}